// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: meals-db-service.proto

package orders_admin_package

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MealsDbService_CreateMeals_FullMethodName = "/models.MealsDbService/CreateMeals"
)

// MealsDbServiceClient is the client API for MealsDbService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MealsDbServiceClient interface {
	CreateMeals(ctx context.Context, in *MealsDb, opts ...grpc.CallOption) (*MealsDbEmpty, error)
}

type mealsDbServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMealsDbServiceClient(cc grpc.ClientConnInterface) MealsDbServiceClient {
	return &mealsDbServiceClient{cc}
}

func (c *mealsDbServiceClient) CreateMeals(ctx context.Context, in *MealsDb, opts ...grpc.CallOption) (*MealsDbEmpty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MealsDbEmpty)
	err := c.cc.Invoke(ctx, MealsDbService_CreateMeals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MealsDbServiceServer is the server API for MealsDbService service.
// All implementations must embed UnimplementedMealsDbServiceServer
// for forward compatibility.
type MealsDbServiceServer interface {
	CreateMeals(context.Context, *MealsDb) (*MealsDbEmpty, error)
	mustEmbedUnimplementedMealsDbServiceServer()
}

// UnimplementedMealsDbServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMealsDbServiceServer struct{}

func (UnimplementedMealsDbServiceServer) CreateMeals(context.Context, *MealsDb) (*MealsDbEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMeals not implemented")
}
func (UnimplementedMealsDbServiceServer) mustEmbedUnimplementedMealsDbServiceServer() {}
func (UnimplementedMealsDbServiceServer) testEmbeddedByValue()                        {}

// UnsafeMealsDbServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MealsDbServiceServer will
// result in compilation errors.
type UnsafeMealsDbServiceServer interface {
	mustEmbedUnimplementedMealsDbServiceServer()
}

func RegisterMealsDbServiceServer(s grpc.ServiceRegistrar, srv MealsDbServiceServer) {
	// If the following call pancis, it indicates UnimplementedMealsDbServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MealsDbService_ServiceDesc, srv)
}

func _MealsDbService_CreateMeals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MealsDb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MealsDbServiceServer).CreateMeals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MealsDbService_CreateMeals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MealsDbServiceServer).CreateMeals(ctx, req.(*MealsDb))
	}
	return interceptor(ctx, in, info, handler)
}

// MealsDbService_ServiceDesc is the grpc.ServiceDesc for MealsDbService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MealsDbService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "models.MealsDbService",
	HandlerType: (*MealsDbServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMeals",
			Handler:    _MealsDbService_CreateMeals_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "meals-db-service.proto",
}
